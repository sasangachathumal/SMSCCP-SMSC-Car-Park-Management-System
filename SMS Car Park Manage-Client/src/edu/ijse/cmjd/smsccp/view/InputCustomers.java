/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.ijse.cmjd.smsccp.view;

import edu.ijse.cmjd.smsccp.serverconnector.ServerConnector;
import edu.ijse.cmjd.smsccp.controller.FixCustomerController;
import edu.ijse.cmjd.smsccp.controller.JobroleController;
import edu.ijse.cmjd.smsccp.controller.SectionController;
import edu.ijse.cmjd.smsccp.model.FixCustomer;
import edu.ijse.cmjd.smsccp.model.JobRole;
import edu.ijse.cmjd.smsccp.model.Section;
import edu.ijse.cmjd.smsccp.observers.impl.FixCustomerObserverImpl;
import edu.ijse.cmjd.smsccp.observers.impl.JobroleObserverImpl;
import edu.ijse.cmjd.smsccp.observers.impl.SectionObserverImpl;
import edu.ijse.cmjd.smsccp.validate.Validate;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lenovo
 */
public class InputCustomers extends javax.swing.JFrame {

    private DefaultComboBoxModel jobboxModel;
    private DefaultComboBoxModel secboxModel;
    private FixCustomerObserverImpl fixCustomerObserverImpl;
    private JobroleObserverImpl jobroleObserverImpl;
    private SectionObserverImpl sectionObserverImpl;

    /**
     * Creates new form InputCustomers
     */
    public InputCustomers() {
        initComponents();
        setLocationRelativeTo(null);
        setAsObserver();
        txtSearch.setText("-Select a option to search-");
        libUpdate.setEnabled(false);
        libRemove.setEnabled(false);
        newCustomermessage.setVisible(false);
        newSectionmessage.setVisible(false);
        newjobrolemessage.setVisible(false);
        loadCustomers();
        loadSections();
        loadJobRoles();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        panMain = new javax.swing.JPanel();
        libTitle = new javax.swing.JLabel();
        libCustomerNIC = new javax.swing.JLabel();
        libCustomerName = new javax.swing.JLabel();
        libCustomerJobRole = new javax.swing.JLabel();
        libCustomerSection = new javax.swing.JLabel();
        libCustomerTele = new javax.swing.JLabel();
        txtCustomerTele = new javax.swing.JTextField();
        txtCustomerNIC = new javax.swing.JTextField();
        txtCustomerName = new javax.swing.JTextField();
        libSearch = new javax.swing.JLabel();
        libAddCustomer = new javax.swing.JLabel();
        libUpdate = new javax.swing.JLabel();
        libRemove = new javax.swing.JLabel();
        btExit = new javax.swing.JButton();
        comSection = new javax.swing.JComboBox();
        comJobrole = new javax.swing.JComboBox();
        libNewSection = new javax.swing.JLabel();
        libNewJobrole = new javax.swing.JLabel();
        Panel1 = new javax.swing.JPanel();
        RadioID = new javax.swing.JRadioButton();
        RadioName = new javax.swing.JRadioButton();
        txtSearch = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabCustomeinfo = new javax.swing.JTable();
        newCustomermessage = new javax.swing.JLabel();
        newjobrolemessage = new javax.swing.JLabel();
        newSectionmessage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        panMain.setBackground(new java.awt.Color(153, 153, 153));
        panMain.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51), 3));
        panMain.setMaximumSize(new java.awt.Dimension(556, 394));
        panMain.setMinimumSize(new java.awt.Dimension(556, 394));
        panMain.setLayout(null);

        libTitle.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        libTitle.setForeground(new java.awt.Color(255, 255, 255));
        libTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        libTitle.setText(" Customer Data");
        panMain.add(libTitle);
        libTitle.setBounds(340, 10, 330, 50);

        libCustomerNIC.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        libCustomerNIC.setForeground(new java.awt.Color(249, 247, 247));
        libCustomerNIC.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        libCustomerNIC.setText("Customer NIC  : ");
        panMain.add(libCustomerNIC);
        libCustomerNIC.setBounds(50, 340, 160, 30);

        libCustomerName.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        libCustomerName.setForeground(new java.awt.Color(249, 247, 247));
        libCustomerName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        libCustomerName.setText("Customer Name  : ");
        panMain.add(libCustomerName);
        libCustomerName.setBounds(50, 390, 160, 30);

        libCustomerJobRole.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        libCustomerJobRole.setForeground(new java.awt.Color(249, 247, 247));
        libCustomerJobRole.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        libCustomerJobRole.setText("Customer JobRole  : ");
        panMain.add(libCustomerJobRole);
        libCustomerJobRole.setBounds(460, 340, 180, 30);

        libCustomerSection.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        libCustomerSection.setForeground(new java.awt.Color(249, 247, 247));
        libCustomerSection.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        libCustomerSection.setText("Customer Section  : ");
        panMain.add(libCustomerSection);
        libCustomerSection.setBounds(470, 390, 170, 30);

        libCustomerTele.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        libCustomerTele.setForeground(new java.awt.Color(249, 247, 247));
        libCustomerTele.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        libCustomerTele.setText("Customer Telephone  : ");
        panMain.add(libCustomerTele);
        libCustomerTele.setBounds(280, 440, 181, 30);

        txtCustomerTele.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtCustomerTele.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        txtCustomerTele.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCustomerTeleKeyPressed(evt);
            }
        });
        panMain.add(txtCustomerTele);
        txtCustomerTele.setBounds(470, 440, 270, 30);

        txtCustomerNIC.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtCustomerNIC.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        txtCustomerNIC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCustomerNICActionPerformed(evt);
            }
        });
        txtCustomerNIC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCustomerNICKeyPressed(evt);
            }
        });
        panMain.add(txtCustomerNIC);
        txtCustomerNIC.setBounds(220, 340, 200, 30);

        txtCustomerName.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtCustomerName.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        txtCustomerName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCustomerNameActionPerformed(evt);
            }
        });
        panMain.add(txtCustomerName);
        txtCustomerName.setBounds(220, 390, 250, 30);

        libSearch.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        libSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smsccp/img/from/Search2.png"))); // NOI18N
        libSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        libSearch.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        libSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                libSearchMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                libSearchMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                libSearchMouseExited(evt);
            }
        });
        panMain.add(libSearch);
        libSearch.setBounds(720, 65, 140, 50);

        libAddCustomer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        libAddCustomer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smsccp/img/from/Input2.png"))); // NOI18N
        libAddCustomer.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        libAddCustomer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                libAddCustomerMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                libAddCustomerMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                libAddCustomerMouseExited(evt);
            }
        });
        panMain.add(libAddCustomer);
        libAddCustomer.setBounds(180, 480, 170, 90);

        libUpdate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        libUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smsccp/img/from/Update2.png"))); // NOI18N
        libUpdate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        libUpdate.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        libUpdate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                libUpdateMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                libUpdateMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                libUpdateMouseExited(evt);
            }
        });
        panMain.add(libUpdate);
        libUpdate.setBounds(360, 480, 170, 90);

        libRemove.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        libRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smsccp/img/from/Remove2.png"))); // NOI18N
        libRemove.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        libRemove.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        libRemove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                libRemoveMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                libRemoveMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                libRemoveMouseExited(evt);
            }
        });
        panMain.add(libRemove);
        libRemove.setBounds(540, 480, 170, 90);

        btExit.setBackground(new java.awt.Color(153, 0, 0));
        btExit.setForeground(new java.awt.Color(255, 255, 255));
        btExit.setText("X");
        btExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExitActionPerformed(evt);
            }
        });
        panMain.add(btExit);
        btExit.setBounds(882, 5, 45, 26);

        panMain.add(comSection);
        comSection.setBounds(650, 390, 170, 30);

        panMain.add(comJobrole);
        comJobrole.setBounds(650, 340, 170, 30);

        libNewSection.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        libNewSection.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smsccp/img/from/new2.png"))); // NOI18N
        libNewSection.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        libNewSection.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                libNewSectionMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                libNewSectionMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                libNewSectionMouseExited(evt);
            }
        });
        panMain.add(libNewSection);
        libNewSection.setBounds(830, 385, 90, 40);

        libNewJobrole.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        libNewJobrole.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smsccp/img/from/new2.png"))); // NOI18N
        libNewJobrole.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        libNewJobrole.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                libNewJobroleMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                libNewJobroleMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                libNewJobroleMouseExited(evt);
            }
        });
        panMain.add(libNewJobrole);
        libNewJobrole.setBounds(830, 335, 90, 40);

        Panel1.setBackground(new java.awt.Color(0, 204, 204));
        Panel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51), 3));

        javax.swing.GroupLayout Panel1Layout = new javax.swing.GroupLayout(Panel1);
        Panel1.setLayout(Panel1Layout);
        Panel1Layout.setHorizontalGroup(
            Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 44, Short.MAX_VALUE)
        );
        Panel1Layout.setVerticalGroup(
            Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 567, Short.MAX_VALUE)
        );

        panMain.add(Panel1);
        Panel1.setBounds(0, 0, 50, 573);

        buttonGroup1.add(RadioID);
        RadioID.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        RadioID.setForeground(new java.awt.Color(255, 255, 255));
        RadioID.setText("Customer NIC");
        RadioID.setContentAreaFilled(false);
        RadioID.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        RadioID.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RadioIDMouseClicked(evt);
            }
        });
        panMain.add(RadioID);
        RadioID.setBounds(133, 80, 120, 30);

        buttonGroup1.add(RadioName);
        RadioName.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        RadioName.setForeground(new java.awt.Color(255, 255, 255));
        RadioName.setText("Customer Name");
        RadioName.setContentAreaFilled(false);
        RadioName.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        RadioName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RadioNameMouseClicked(evt);
            }
        });
        RadioName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioNameActionPerformed(evt);
            }
        });
        panMain.add(RadioName);
        RadioName.setBounds(274, 80, 130, 30);

        txtSearch.setEditable(false);
        txtSearch.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSearchFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSearchFocusLost(evt);
            }
        });
        panMain.add(txtSearch);
        txtSearch.setBounds(423, 80, 290, 30);

        tabCustomeinfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer NIC", "Customer Name", "Customer JobRole", "Customer Section", "Customer Tele"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabCustomeinfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabCustomeinfoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabCustomeinfo);

        panMain.add(jScrollPane1);
        jScrollPane1.setBounds(70, 120, 840, 200);

        newCustomermessage.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        newCustomermessage.setForeground(new java.awt.Color(255, 204, 0));
        newCustomermessage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        newCustomermessage.setText("A New Customer Added !!!!!!!");
        panMain.add(newCustomermessage);
        newCustomermessage.setBounds(50, 0, 310, 30);

        newjobrolemessage.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        newjobrolemessage.setForeground(new java.awt.Color(255, 204, 0));
        newjobrolemessage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        newjobrolemessage.setText("A Jobrole Added !!!!!!!");
        panMain.add(newjobrolemessage);
        newjobrolemessage.setBounds(50, 0, 310, 30);

        newSectionmessage.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        newSectionmessage.setForeground(new java.awt.Color(255, 204, 0));
        newSectionmessage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        newSectionmessage.setText("A Section Added !!!!!!!");
        panMain.add(newSectionmessage);
        newSectionmessage.setBounds(50, 0, 310, 30);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panMain, javax.swing.GroupLayout.PREFERRED_SIZE, 933, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panMain, javax.swing.GroupLayout.PREFERRED_SIZE, 573, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExitActionPerformed
        exitform();
    }//GEN-LAST:event_btExitActionPerformed

    private void libAddCustomerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libAddCustomerMouseClicked
        addCustomer();
    }//GEN-LAST:event_libAddCustomerMouseClicked

    private void libUpdateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libUpdateMouseClicked
        updateCustomer();
    }//GEN-LAST:event_libUpdateMouseClicked

    private void libRemoveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libRemoveMouseClicked
        RemoveCustomer();
    }//GEN-LAST:event_libRemoveMouseClicked

    private void libSearchMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libSearchMouseExited
        libSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smsccp/img/from/Search2.png")));
    }//GEN-LAST:event_libSearchMouseExited

    private void libSearchMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libSearchMouseEntered
        libSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smsccp/img/from/Search1.png")));
    }//GEN-LAST:event_libSearchMouseEntered

    private void libRemoveMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libRemoveMouseExited
        libRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smsccp/img/from/Remove2.png")));
    }//GEN-LAST:event_libRemoveMouseExited

    private void libRemoveMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libRemoveMouseEntered
        libRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smsccp/img/from/Remove1.png")));
    }//GEN-LAST:event_libRemoveMouseEntered

    private void libUpdateMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libUpdateMouseExited
        libUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smsccp/img/from/Update2.png")));
    }//GEN-LAST:event_libUpdateMouseExited

    private void libUpdateMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libUpdateMouseEntered
        libUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smsccp/img/from/Update1.png")));
    }//GEN-LAST:event_libUpdateMouseEntered

    private void libAddCustomerMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libAddCustomerMouseExited
        libAddCustomer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smsccp/img/from/Input2.png")));
    }//GEN-LAST:event_libAddCustomerMouseExited

    private void libAddCustomerMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libAddCustomerMouseEntered
        libAddCustomer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smsccp/img/from/Input1.png")));
    }//GEN-LAST:event_libAddCustomerMouseEntered

    private void libSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libSearchMouseClicked
        SearchCustomer();
    }//GEN-LAST:event_libSearchMouseClicked

    private void RadioNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RadioNameActionPerformed

    private void libNewJobroleMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libNewJobroleMouseExited
        libNewJobrole.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smsccp/img/from/new2.png")));
    }//GEN-LAST:event_libNewJobroleMouseExited

    private void libNewJobroleMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libNewJobroleMouseEntered
        libNewJobrole.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smsccp/img/from/new1.png")));
    }//GEN-LAST:event_libNewJobroleMouseEntered

    private void libNewSectionMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libNewSectionMouseExited
        libNewSection.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smsccp/img/from/new2.png")));
    }//GEN-LAST:event_libNewSectionMouseExited

    private void libNewSectionMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libNewSectionMouseEntered
        libNewSection.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smsccp/img/from/new1.png")));
    }//GEN-LAST:event_libNewSectionMouseEntered

    private void RadioIDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RadioIDMouseClicked
        txtSearch.setEditable(true);
        txtSearch.requestFocus();
    }//GEN-LAST:event_RadioIDMouseClicked

    private void RadioNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RadioNameMouseClicked
        txtSearch.setEditable(true);
        txtSearch.requestFocus();
    }//GEN-LAST:event_RadioNameMouseClicked

    private void txtSearchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchFocusLost
        txtSearch.setText("-Select a option to search-");
    }//GEN-LAST:event_txtSearchFocusLost

    private void txtSearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchFocusGained
        txtSearch.setText("");
    }//GEN-LAST:event_txtSearchFocusGained

    private void txtCustomerNICKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCustomerNICKeyPressed
        Validate.nicNoValidation(txtCustomerNIC);
    }//GEN-LAST:event_txtCustomerNICKeyPressed

    private void txtCustomerTeleKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCustomerTeleKeyPressed
        Validate.tpNoValidation(txtCustomerTele);
    }//GEN-LAST:event_txtCustomerTeleKeyPressed

    private void libNewJobroleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libNewJobroleMouseClicked
        new inputJobRole(this, true).setVisible(true);
    }//GEN-LAST:event_libNewJobroleMouseClicked

    private void libNewSectionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libNewSectionMouseClicked
        new inputSection(this, true).setVisible(true);
    }//GEN-LAST:event_libNewSectionMouseClicked

    private void txtCustomerNICActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCustomerNICActionPerformed
        txtCustomerName.requestFocus();
    }//GEN-LAST:event_txtCustomerNICActionPerformed

    private void txtCustomerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCustomerNameActionPerformed
        comJobrole.requestFocus();
    }//GEN-LAST:event_txtCustomerNameActionPerformed

    private void tabCustomeinfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabCustomeinfoMouseClicked
        setValueToTextField();
    }//GEN-LAST:event_tabCustomeinfoMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InputCustomers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InputCustomers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InputCustomers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InputCustomers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InputCustomers().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Panel1;
    private javax.swing.JRadioButton RadioID;
    private javax.swing.JRadioButton RadioName;
    private javax.swing.JButton btExit;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox comJobrole;
    private javax.swing.JComboBox comSection;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel libAddCustomer;
    private javax.swing.JLabel libCustomerJobRole;
    private javax.swing.JLabel libCustomerNIC;
    private javax.swing.JLabel libCustomerName;
    private javax.swing.JLabel libCustomerSection;
    private javax.swing.JLabel libCustomerTele;
    private javax.swing.JLabel libNewJobrole;
    private javax.swing.JLabel libNewSection;
    private javax.swing.JLabel libRemove;
    private javax.swing.JLabel libSearch;
    private javax.swing.JLabel libTitle;
    private javax.swing.JLabel libUpdate;
    private javax.swing.JLabel newCustomermessage;
    private javax.swing.JLabel newSectionmessage;
    private javax.swing.JLabel newjobrolemessage;
    private javax.swing.JPanel panMain;
    private javax.swing.JTable tabCustomeinfo;
    private javax.swing.JTextField txtCustomerNIC;
    private javax.swing.JTextField txtCustomerName;
    private javax.swing.JTextField txtCustomerTele;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    private void addCustomer() {
        try {
            FixCustomerController fixCustomerController = ServerConnector.getServerConnector().getFixCustomerController();

            FixCustomer fixCustomer = new FixCustomer(txtCustomerName.getText(), txtCustomerNIC.getText(), String.valueOf(comJobrole.getSelectedItem()), String.valueOf(comSection.getSelectedItem()), txtCustomerTele.getText());

            boolean addFixCustomer = fixCustomerController.addFixCustomer(fixCustomer);

            if (addFixCustomer) {
                JOptionPane.showMessageDialog(null, "Customer Added Success !!");
            } else {
                JOptionPane.showMessageDialog(null, "Customer Added Fail !!");
            }

        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
            new ServerNull().setVisible(true);
        } catch (ClassNotFoundException | IOException ex) {
            Logger.getLogger(InputCustomers.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void updateCustomer() {
        try {
            FixCustomerController fixCustomerController = ServerConnector.getServerConnector().getFixCustomerController();

            FixCustomer fixCustomer = new FixCustomer(txtCustomerName.getText(), txtCustomerNIC.getText(), String.valueOf(comJobrole.getSelectedItem()), String.valueOf(comSection.getSelectedItem()), txtCustomerTele.getText());
            boolean updateFixCustomer = fixCustomerController.updateFixCustomer(fixCustomer);

            if (updateFixCustomer) {
                JOptionPane.showMessageDialog(null, "Customer Update Success !!");
            } else {
                JOptionPane.showMessageDialog(null, "Customer Update Fail !!");
            }
            fixCustomerController.releaseFixCustomer(txtCustomerNIC.getText());
        } catch (RemoteException | NotBoundException | MalformedURLException ex) {
            new ServerNull().setVisible(true);
        } catch (ClassNotFoundException | IOException ex) {
            Logger.getLogger(InputCustomers.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void RemoveCustomer() {
        try {
            FixCustomerController fixCustomerController = ServerConnector.getServerConnector().getFixCustomerController();
            boolean reserveFixCustomer = fixCustomerController.reserveFixCustomer(txtCustomerNIC.getText());

            if (reserveFixCustomer) {
                JOptionPane.showMessageDialog(null, "Customer Remove Success !!");
            } else {
                JOptionPane.showMessageDialog(null, "Customer Remove Fail !!");
            }
            fixCustomerController.releaseFixCustomer(txtCustomerNIC.getText());
        } catch (MalformedURLException | RemoteException ex) {
            new ServerNull().setVisible(true);
        } catch (IOException | NotBoundException ex) {
            Logger.getLogger(InputCustomers.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void SearchCustomer() {
        int rowCount = tabCustomeinfo.getRowCount();
        String searchValue = txtSearch.getText();
        if (RadioID.isSelected()) {
            for (int i = 0; i == rowCount; i++) {
                if (searchValue.toLowerCase().equals(String.valueOf(tabCustomeinfo.getValueAt(i, 0)).toLowerCase())) {
                    tabCustomeinfo.setRowSelectionInterval(i, i);
                    break;
                }
            }
        } else if (RadioName.isSelected()) {
            for (int i = 0; i == rowCount; i++) {
                if (searchValue.toLowerCase().equals(String.valueOf(tabCustomeinfo.getValueAt(i, 1)).toLowerCase())) {
                    tabCustomeinfo.setRowSelectionInterval(i, i);
                    break;
                }
            }

        } else {
            JOptionPane.showMessageDialog(null, "Please select a option to Search !!!!");
        }
    }

    private void exitform() {
        try {
            FixCustomerController fixCustomerController = ServerConnector.getServerConnector().getFixCustomerController();
            JobroleController jobroleController = ServerConnector.getServerConnector().getJobroleController();
            SectionController sectionController = ServerConnector.getServerConnector().getSectionController();
            fixCustomerController.releaseFixCustomer(txtCustomerNIC.getText());
            fixCustomerController.removeFixCustomerObserver(fixCustomerObserverImpl);
            jobroleController.removeJobRoleObserver(jobroleObserverImpl);
            sectionController.addSectionObserver(sectionObserverImpl);
            new InputMenu().setVisible(true);
            this.dispose();
        } catch (NotBoundException |MalformedURLException |RemoteException ex) {
            new ServerNull().setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(InputCustomers.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void loadSections() {
        try {
            SectionController sectionController = ServerConnector.getServerConnector().getSectionController();
            ArrayList<Section> allSection = sectionController.getAllSection();
            secboxModel = (DefaultComboBoxModel) comSection.getModel();
            secboxModel.removeAllElements();
            if (!allSection.isEmpty()) {
                for (Section section : allSection) {
                    secboxModel.addElement(section.getSectionName());
                }
            } else {
                secboxModel.setSelectedItem("Input New");
            }

        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
            new ServerNull().setVisible(true);
        } catch (ClassNotFoundException | IOException ex) {
            Logger.getLogger(InputCustomers.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void loadJobRoles() {
        try {
            JobroleController jobroleController = ServerConnector.getServerConnector().getJobroleController();
            ArrayList<JobRole> allJobRole = jobroleController.getAllJobRole();
            jobboxModel = (DefaultComboBoxModel) comJobrole.getModel();
            jobboxModel.removeAllElements();
            if (!allJobRole.isEmpty()) {
                for (JobRole jobRole : allJobRole) {
                    jobboxModel.addElement(jobRole.getJobRoleName());
                }
            } else {
                jobboxModel.setSelectedItem("Input New");
            }

        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
            new ServerNull().setVisible(true);
        } catch (ClassNotFoundException | IOException ex) {
            Logger.getLogger(InputCustomers.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void loadCustomers() {
        try {
            FixCustomerController fixCustomerController = ServerConnector.getServerConnector().getFixCustomerController();
            ArrayList<FixCustomer> allFixCustomer = fixCustomerController.getAllFixCustomer();
            DefaultTableModel tableModel = (DefaultTableModel) tabCustomeinfo.getModel();
            tableModel.setRowCount(0);
            for (FixCustomer fixCustomer : allFixCustomer) {
                Object[] row = {fixCustomer.getFxCustomerINC(), fixCustomer.getFxCustomerName(), fixCustomer.getFxCustomerJobRole(), fixCustomer.getFxCustomerSection(), fixCustomer.getFxCustomerTelephone()};
                tableModel.addRow(row);
            }

        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
            new ServerNull().setVisible(true);
        } catch (ClassNotFoundException | IOException ex) {
            Logger.getLogger(InputCustomers.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setAsObserver() {
        try {
            fixCustomerObserverImpl = new FixCustomerObserverImpl(this);
            jobroleObserverImpl = new JobroleObserverImpl(this);
            sectionObserverImpl = new SectionObserverImpl(this);
            FixCustomerController fixCustomerController = ServerConnector.getServerConnector().getFixCustomerController();
            JobroleController jobroleController = ServerConnector.getServerConnector().getJobroleController();
            SectionController sectionController = ServerConnector.getServerConnector().getSectionController();
            fixCustomerController.addFixCustomerObserver(fixCustomerObserverImpl);
            jobroleController.addJobRoleObserver(jobroleObserverImpl);
            sectionController.addSectionObserver(sectionObserverImpl);
            this.fixCustomerObserverImpl = fixCustomerObserverImpl;
            this.jobroleObserverImpl = jobroleObserverImpl;
            this.sectionObserverImpl = sectionObserverImpl;

        } catch (RemoteException | NotBoundException | MalformedURLException ex) {
            new ServerNull().setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(InputCustomers.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void newInputFixCustomer(FixCustomer fixCustomer) {
        for (int i = 0; i == 900000; i++) {
            if (i == 500000) {
                newCustomermessage.setVisible(false);
                break;
            } else {
                newCustomermessage.setVisible(true);
            }
        }
    }

    private void setValueToTextField() {
        int selectedRow = tabCustomeinfo.getSelectedRow();
        String NIC = String.valueOf(tabCustomeinfo.getValueAt(selectedRow, 0));
        String name = String.valueOf(tabCustomeinfo.getValueAt(selectedRow, 1));
        String jobrole = String.valueOf(tabCustomeinfo.getValueAt(selectedRow, 2));
        String section = String.valueOf(tabCustomeinfo.getValueAt(selectedRow, 3));
        String Tele = String.valueOf(tabCustomeinfo.getValueAt(selectedRow, 4));

        txtCustomerNIC.setText(NIC);
        txtCustomerName.setText(name);
        txtCustomerTele.setText(Tele);
        jobboxModel.setSelectedItem(jobrole);
        secboxModel.setSelectedItem(section);

        libUpdate.setEnabled(true);
        libRemove.setEnabled(true);
    }

    public void setnewJobrole(JobRole jobRole) {
        for (int i = 0; i == 900000; i++) {
            if (i == 500000) {
                newjobrolemessage.setVisible(false);
                break;
            } else {
                newjobrolemessage.setVisible(true);
            }
        }
    }

    public void setNewSectio() {
        for (int i = 0; i == 900000; i++) {
            if (i == 500000) {
                newSectionmessage.setVisible(false);
                break;
            } else {
                newSectionmessage.setVisible(true);
            }
        }
    }

}
