/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.ijse.cmjd.smsccp.view;

import edu.ijse.cmjd.smsccp.serverconnector.ServerConnector;
import edu.ijse.cmjd.smsccp.controller.PlaceController;
import edu.ijse.cmjd.smsccp.controller.VehicleTypeController;
import edu.ijse.cmjd.smsccp.model.Place;
import edu.ijse.cmjd.smsccp.observers.impl.PlaceObserverImpl;
import edu.ijse.cmjd.smsccp.observers.impl.VehicleTypeObserverImpl;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lenovo
 */
public class InputPlace extends javax.swing.JFrame {
    private DefaultComboBoxModel boxModel;
    private PlaceObserverImpl placeObserverImpl;
    private VehicleTypeObserverImpl vehicleTypeObserverImpl;
    /**
     * Creates new form InputPlace
     */
    public InputPlace() {
        initComponents();
        setLocationRelativeTo(null);
        setAsObservers();
        boxModel = (DefaultComboBoxModel) comVehicleType.getModel();
        txtSearch.setText("-Select a options-");
        libUpbate.setEnabled(false);
        libRemove.setEnabled(false);
        loadPlace();
        loadVehicleTypes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        panMain = new javax.swing.JPanel();
        libTitle = new javax.swing.JLabel();
        libPlaceId = new javax.swing.JLabel();
        libVehicaleType = new javax.swing.JLabel();
        libSpecial = new javax.swing.JLabel();
        txtPlaceId = new javax.swing.JTextField();
        txtSpecial = new javax.swing.JTextField();
        libSearch = new javax.swing.JLabel();
        libRemove = new javax.swing.JLabel();
        libInput = new javax.swing.JLabel();
        libUpbate = new javax.swing.JLabel();
        comVehicleType = new javax.swing.JComboBox();
        libNewVehicleType = new javax.swing.JLabel();
        btExit = new javax.swing.JButton();
        Panel1 = new javax.swing.JPanel();
        txtSearch = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabSearchinfo = new javax.swing.JTable();
        RadioVehical = new javax.swing.JRadioButton();
        RadioPlaceID = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        panMain.setBackground(new java.awt.Color(153, 153, 153));
        panMain.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51), 3));
        panMain.setMaximumSize(new java.awt.Dimension(423, 319));
        panMain.setMinimumSize(new java.awt.Dimension(423, 319));
        panMain.setLayout(null);

        libTitle.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        libTitle.setForeground(new java.awt.Color(255, 255, 255));
        libTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        libTitle.setText(" Place Data");
        panMain.add(libTitle);
        libTitle.setBounds(220, 0, 310, 50);

        libPlaceId.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        libPlaceId.setForeground(new java.awt.Color(244, 244, 244));
        libPlaceId.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        libPlaceId.setText("Place ID  : ");
        panMain.add(libPlaceId);
        libPlaceId.setBounds(60, 270, 180, 30);

        libVehicaleType.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        libVehicaleType.setForeground(new java.awt.Color(244, 244, 244));
        libVehicaleType.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        libVehicaleType.setText("Place Vehicle Type  : ");
        panMain.add(libVehicaleType);
        libVehicaleType.setBounds(60, 310, 180, 30);

        libSpecial.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        libSpecial.setForeground(new java.awt.Color(244, 244, 244));
        libSpecial.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        libSpecial.setText("Place Special  : ");
        panMain.add(libSpecial);
        libSpecial.setBounds(60, 350, 180, 30);

        txtPlaceId.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtPlaceId.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        txtPlaceId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPlaceIdActionPerformed(evt);
            }
        });
        panMain.add(txtPlaceId);
        txtPlaceId.setBounds(250, 270, 100, 30);

        txtSpecial.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtSpecial.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panMain.add(txtSpecial);
        txtSpecial.setBounds(250, 350, 220, 30);

        libSearch.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        libSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smsccp/img/from/Search2.png"))); // NOI18N
        libSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        libSearch.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        libSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                libSearchMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                libSearchMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                libSearchMouseExited(evt);
            }
        });
        panMain.add(libSearch);
        libSearch.setBounds(540, 45, 140, 50);

        libRemove.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        libRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smsccp/img/from/Remove2.png"))); // NOI18N
        libRemove.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        libRemove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                libRemoveMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                libRemoveMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                libRemoveMouseExited(evt);
            }
        });
        panMain.add(libRemove);
        libRemove.setBounds(510, 390, 164, 90);

        libInput.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        libInput.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smsccp/img/from/Input2.png"))); // NOI18N
        libInput.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        libInput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                libInputMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                libInputMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                libInputMouseExited(evt);
            }
        });
        panMain.add(libInput);
        libInput.setBounds(150, 390, 170, 90);

        libUpbate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        libUpbate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smsccp/img/from/Update2.png"))); // NOI18N
        libUpbate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        libUpbate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                libUpbateMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                libUpbateMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                libUpbateMouseExited(evt);
            }
        });
        panMain.add(libUpbate);
        libUpbate.setBounds(330, 390, 170, 90);

        panMain.add(comVehicleType);
        comVehicleType.setBounds(250, 310, 220, 30);

        libNewVehicleType.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        libNewVehicleType.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smsccp/img/from/new2.png"))); // NOI18N
        libNewVehicleType.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        libNewVehicleType.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                libNewVehicleTypeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                libNewVehicleTypeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                libNewVehicleTypeMouseExited(evt);
            }
        });
        panMain.add(libNewVehicleType);
        libNewVehicleType.setBounds(480, 307, 80, 40);

        btExit.setBackground(new java.awt.Color(153, 0, 0));
        btExit.setForeground(new java.awt.Color(255, 255, 255));
        btExit.setText("X");
        btExit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExitActionPerformed(evt);
            }
        });
        panMain.add(btExit);
        btExit.setBounds(645, 5, 45, 26);

        Panel1.setBackground(new java.awt.Color(0, 204, 204));
        Panel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51), 3));

        javax.swing.GroupLayout Panel1Layout = new javax.swing.GroupLayout(Panel1);
        Panel1.setLayout(Panel1Layout);
        Panel1Layout.setHorizontalGroup(
            Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 44, Short.MAX_VALUE)
        );
        Panel1Layout.setVerticalGroup(
            Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 482, Short.MAX_VALUE)
        );

        panMain.add(Panel1);
        Panel1.setBounds(0, 0, 50, 488);

        txtSearch.setEditable(false);
        txtSearch.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtSearch.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        txtSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSearchFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSearchFocusLost(evt);
            }
        });
        panMain.add(txtSearch);
        txtSearch.setBounds(363, 60, 170, 30);

        tabSearchinfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Place ID", "Vehical Type", "Special"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabSearchinfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabSearchinfoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabSearchinfo);

        panMain.add(jScrollPane1);
        jScrollPane1.setBounds(70, 110, 600, 150);

        buttonGroup1.add(RadioVehical);
        RadioVehical.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        RadioVehical.setForeground(new java.awt.Color(255, 255, 255));
        RadioVehical.setText("Vehicle Type");
        RadioVehical.setContentAreaFilled(false);
        RadioVehical.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        RadioVehical.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RadioVehicalMouseClicked(evt);
            }
        });
        panMain.add(RadioVehical);
        RadioVehical.setBounds(245, 60, 110, 30);

        buttonGroup1.add(RadioPlaceID);
        RadioPlaceID.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        RadioPlaceID.setForeground(new java.awt.Color(255, 255, 255));
        RadioPlaceID.setText("Place ID");
        RadioPlaceID.setContentAreaFilled(false);
        RadioPlaceID.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RadioPlaceIDMouseClicked(evt);
            }
        });
        RadioPlaceID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioPlaceIDActionPerformed(evt);
            }
        });
        panMain.add(RadioPlaceID);
        RadioPlaceID.setBounds(150, 60, 90, 30);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panMain, javax.swing.GroupLayout.PREFERRED_SIZE, 695, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panMain, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExitActionPerformed
        new InputMenu().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btExitActionPerformed

    private void libSearchMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libSearchMouseExited
        libSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smsccp/img/from/Search2.png")));
    }//GEN-LAST:event_libSearchMouseExited

    private void libSearchMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libSearchMouseEntered
        libSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smsccp/img/from/Search1.png")));
    }//GEN-LAST:event_libSearchMouseEntered

    private void libRemoveMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libRemoveMouseExited
        libRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smsccp/img/from/Remove2.png")));
    }//GEN-LAST:event_libRemoveMouseExited

    private void libRemoveMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libRemoveMouseEntered
        libRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smsccp/img/from/Remove1.png")));
    }//GEN-LAST:event_libRemoveMouseEntered

    private void libUpbateMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libUpbateMouseExited
        libUpbate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smsccp/img/from/Update2.png")));
    }//GEN-LAST:event_libUpbateMouseExited

    private void libUpbateMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libUpbateMouseEntered
        libUpbate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smsccp/img/from/Update1.png")));
    }//GEN-LAST:event_libUpbateMouseEntered

    private void libInputMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libInputMouseExited
        libInput.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smsccp/img/from/Input2.png")));
    }//GEN-LAST:event_libInputMouseExited

    private void libInputMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libInputMouseEntered
        libInput.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smsccp/img/from/Input1.png")));
    }//GEN-LAST:event_libInputMouseEntered

    private void libNewVehicleTypeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libNewVehicleTypeMouseExited
        libNewVehicleType.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smsccp/img/from/new2.png")));
    }//GEN-LAST:event_libNewVehicleTypeMouseExited

    private void libNewVehicleTypeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libNewVehicleTypeMouseEntered
        libNewVehicleType.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smsccp/img/from/new1.png")));
    }//GEN-LAST:event_libNewVehicleTypeMouseEntered

    private void RadioPlaceIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioPlaceIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RadioPlaceIDActionPerformed

    private void RadioPlaceIDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RadioPlaceIDMouseClicked

        txtSearch.setEditable(true);
        txtSearch.requestFocus();
    }//GEN-LAST:event_RadioPlaceIDMouseClicked

    private void RadioVehicalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RadioVehicalMouseClicked
        txtSearch.setEditable(true);
        txtSearch.requestFocus();
    }//GEN-LAST:event_RadioVehicalMouseClicked

    private void txtSearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchFocusGained
        txtSearch.setText("");
    }//GEN-LAST:event_txtSearchFocusGained

    private void txtSearchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchFocusLost
        txtSearch.setText("-Select a options-");
    }//GEN-LAST:event_txtSearchFocusLost

    private void libRemoveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libRemoveMouseClicked
        removePlace();
    }//GEN-LAST:event_libRemoveMouseClicked

    private void libNewVehicleTypeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libNewVehicleTypeMouseClicked
        new inputVehicaleType(this, true).setVisible(true);
    }//GEN-LAST:event_libNewVehicleTypeMouseClicked

    private void libSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libSearchMouseClicked
        searchCustomerfromTable();
    }//GEN-LAST:event_libSearchMouseClicked

    private void txtPlaceIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPlaceIdActionPerformed
        comVehicleType.requestFocus();
    }//GEN-LAST:event_txtPlaceIdActionPerformed

    private void libInputMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libInputMouseClicked
        inputNewPlace();
    }//GEN-LAST:event_libInputMouseClicked

    private void libUpbateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libUpbateMouseClicked
        updatePlace();
    }//GEN-LAST:event_libUpbateMouseClicked

    private void tabSearchinfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabSearchinfoMouseClicked
        setValuesToTextFields();
    }//GEN-LAST:event_tabSearchinfoMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InputPlace.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InputPlace.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InputPlace.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InputPlace.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InputPlace().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Panel1;
    private javax.swing.JRadioButton RadioPlaceID;
    private javax.swing.JRadioButton RadioVehical;
    private javax.swing.JButton btExit;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox comVehicleType;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel libInput;
    private javax.swing.JLabel libNewVehicleType;
    private javax.swing.JLabel libPlaceId;
    private javax.swing.JLabel libRemove;
    private javax.swing.JLabel libSearch;
    private javax.swing.JLabel libSpecial;
    private javax.swing.JLabel libTitle;
    private javax.swing.JLabel libUpbate;
    private javax.swing.JLabel libVehicaleType;
    private javax.swing.JPanel panMain;
    private javax.swing.JTable tabSearchinfo;
    private javax.swing.JTextField txtPlaceId;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtSpecial;
    // End of variables declaration//GEN-END:variables

    public void loadVehicleTypes() {
        try {
            PlaceController placeController = ServerConnector.getServerConnector().getPlaceController();
            ArrayList<Place> allPlace = placeController.getAllPlace();
            DefaultTableModel tableModel = (DefaultTableModel) tabSearchinfo.getModel();
            tableModel.setRowCount(0);
            for (Place place : allPlace) {
                Object[] row = {place.getPlaceID(), place.getPlaceVehicalType(), place.getPlaceSpecial()};
                tableModel.addRow(row);
            }
            
        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
            new ServerNull().setVisible(true);
        } catch (ClassNotFoundException | IOException ex) {
            Logger.getLogger(InputPlace.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void searchCustomerfromTable() {
        int rowCount = tabSearchinfo.getRowCount();
        String searchValue = txtSearch.getText();
        for (int i = 0; i == rowCount; i++) {
            if (RadioPlaceID.isSelected()) {
                if (searchValue.toLowerCase().equals(String.valueOf(tabSearchinfo.getValueAt(i, 0)).toLowerCase())) {
                    
                }
            } else if  (RadioVehical.isSelected()) {
                if (searchValue.toLowerCase().equals(String.valueOf(tabSearchinfo.getValueAt(i, 1)).toLowerCase())) {
                    
                }
            } else {
            }
        }
    }

    public void loadPlace() {
        try {
            PlaceController placeController = ServerConnector.getServerConnector().getPlaceController();
            ArrayList<Place> allPlace = placeController.getAllPlace();
            DefaultTableModel tableModel = (DefaultTableModel) tabSearchinfo.getModel();
            tableModel.setRowCount(0);
            if (!allPlace.isEmpty()) {
                for (Place place : allPlace) {
                    Object[] row = {place.getPlaceID(), place.getPlaceVehicalType(), place.getPlaceSpecial()};
                    tableModel.addRow(row);
                }
            }
            
        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
            new ServerNull().setVisible(true);
        } catch (ClassNotFoundException | IOException ex) {
            Logger.getLogger(InputPlace.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void inputNewPlace() {
        try {
            Place place = new Place(txtPlaceId.getText(), String.valueOf(comVehicleType.getSelectedItem()), txtSpecial.getText());
            PlaceController placeController = ServerConnector.getServerConnector().getPlaceController();
            boolean isaddPlace = placeController.addPlace(place);
            if (isaddPlace) {
                JOptionPane.showMessageDialog(null, "Place Successfuly Add !!!");
            } else {
                JOptionPane.showMessageDialog(null, "Place Added Fail !!!");
            }
            
        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
            new ServerNull().setVisible(true);
        } catch (ClassNotFoundException | IOException ex) {
            Logger.getLogger(InputPlace.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void updatePlace() {
        try {
            Place place = new Place(txtPlaceId.getText(), String.valueOf(comVehicleType.getSelectedItem()), txtSpecial.getText());
            PlaceController placeController = ServerConnector.getServerConnector().getPlaceController();
            boolean isupdatePlace = placeController.updatePlace(place);
            if (isupdatePlace) {
                JOptionPane.showMessageDialog(null, "Place Successfully Update !!!");
            } else {
                JOptionPane.showMessageDialog(null, "Place Update fail !!!");
            }
            placeController.releasePlace(txtPlaceId.getText());
        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
            new ServerNull().setVisible(true);
        } catch (ClassNotFoundException | IOException ex) {
            Logger.getLogger(InputPlace.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setAsObservers() {
        try {
            placeObserverImpl = new PlaceObserverImpl(this);
            vehicleTypeObserverImpl = new VehicleTypeObserverImpl(this);
            PlaceController placeController = ServerConnector.getServerConnector().getPlaceController();
            VehicleTypeController vehicleTypeController = ServerConnector.getServerConnector().getVehicleTypeController();
            placeController.addPlaceObserver(placeObserverImpl);
            vehicleTypeController.addVehicleTypeObserver(vehicleTypeObserverImpl);
            this.placeObserverImpl = placeObserverImpl;
            this.vehicleTypeObserverImpl = vehicleTypeObserverImpl;
            
        } catch (RemoteException | NotBoundException | MalformedURLException ex) {
            new ServerNull().setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(InputPlace.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setValuesToTextFields() {
        try {
            int selectedRow = tabSearchinfo.getSelectedRow();
            String ID = String.valueOf(tabSearchinfo.getValueAt(selectedRow, 0));
            String vehicle = String.valueOf(tabSearchinfo.getValueAt(selectedRow, 1));
            String specl = String.valueOf(tabSearchinfo.getValueAt(selectedRow, 2));
            PlaceController placeController = ServerConnector.getServerConnector().getPlaceController();
            boolean isreleasePlace = placeController.releasePlace(txtPlaceId.getText());
            if (isreleasePlace) {
                boolean isreservePlace = placeController.reservePlace(ID);
                if (isreservePlace) {
                    txtPlaceId.setText(ID);
                    txtSpecial.setText(specl);
                    boxModel.setSelectedItem(vehicle);
                } else {
                    JOptionPane.showMessageDialog(null, "Erroe In Place Reserve !!!");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Erroe In Place Release !!!");
            }
            
            libUpbate.setEnabled(true);
            libRemove.setEnabled(true);
        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
            new ServerNull().setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(InputPlace.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void removePlace() {
        try {
            PlaceController placeController = ServerConnector.getServerConnector().getPlaceController();
            boolean isdeletePlace = placeController.deletePlace(txtPlaceId.getText());
            if (isdeletePlace) {
                JOptionPane.showMessageDialog(null, "Place Successfully Remove !!!");
            } else {
                JOptionPane.showMessageDialog(null, "Place Remove Fail !!!");
            }
            placeController.releasePlace(txtPlaceId.getText());
            
        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
            new ServerNull().setVisible(true);
        } catch (ClassNotFoundException | IOException ex) {
            Logger.getLogger(InputPlace.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
